# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AnnoyIndex')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AnnoyIndex')
    _AnnoyIndex = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AnnoyIndex', [dirname(__file__)])
        except ImportError:
            import _AnnoyIndex
            return _AnnoyIndex
        try:
            _mod = imp.load_module('_AnnoyIndex', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AnnoyIndex = swig_import_helper()
    del swig_import_helper
else:
    import _AnnoyIndex
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Random(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _AnnoyIndex.Random_x_set
    __swig_getmethods__["x"] = _AnnoyIndex.Random_x_get
    if _newclass:
        x = _swig_property(_AnnoyIndex.Random_x_get, _AnnoyIndex.Random_x_set)
    __swig_setmethods__["y"] = _AnnoyIndex.Random_y_set
    __swig_getmethods__["y"] = _AnnoyIndex.Random_y_get
    if _newclass:
        y = _swig_property(_AnnoyIndex.Random_y_get, _AnnoyIndex.Random_y_set)
    __swig_setmethods__["z"] = _AnnoyIndex.Random_z_set
    __swig_getmethods__["z"] = _AnnoyIndex.Random_z_get
    if _newclass:
        z = _swig_property(_AnnoyIndex.Random_z_get, _AnnoyIndex.Random_z_set)
    __swig_setmethods__["c"] = _AnnoyIndex.Random_c_set
    __swig_getmethods__["c"] = _AnnoyIndex.Random_c_get
    if _newclass:
        c = _swig_property(_AnnoyIndex.Random_c_get, _AnnoyIndex.Random_c_set)

    def __init__(self, seed=123456789):
        this = _AnnoyIndex.new_Random(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def kiss(self):
        return _AnnoyIndex.Random_kiss(self)

    def flip(self):
        return _AnnoyIndex.Random_flip(self)

    def index(self, n):
        return _AnnoyIndex.Random_index(self, n)
    __swig_destroy__ = _AnnoyIndex.delete_Random
    __del__ = lambda self: None
Random_swigregister = _AnnoyIndex.Random_swigregister
Random_swigregister(Random)


def dot(x, y, f):
    return _AnnoyIndex.dot(x, y, f)
dot = _AnnoyIndex.dot

def get_norm(v, f):
    return _AnnoyIndex.get_norm(v, f)
get_norm = _AnnoyIndex.get_norm

def normalize(v, f):
    return _AnnoyIndex.normalize(v, f)
normalize = _AnnoyIndex.normalize
class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_descendants"] = _AnnoyIndex.Node_n_descendants_set
    __swig_getmethods__["n_descendants"] = _AnnoyIndex.Node_n_descendants_get
    if _newclass:
        n_descendants = _swig_property(_AnnoyIndex.Node_n_descendants_get, _AnnoyIndex.Node_n_descendants_set)
    __swig_setmethods__["a"] = _AnnoyIndex.Node_a_set
    __swig_getmethods__["a"] = _AnnoyIndex.Node_a_get
    if _newclass:
        a = _swig_property(_AnnoyIndex.Node_a_get, _AnnoyIndex.Node_a_set)
    __swig_setmethods__["children"] = _AnnoyIndex.Node_children_set
    __swig_getmethods__["children"] = _AnnoyIndex.Node_children_get
    if _newclass:
        children = _swig_property(_AnnoyIndex.Node_children_get, _AnnoyIndex.Node_children_set)
    __swig_setmethods__["norm"] = _AnnoyIndex.Node_norm_set
    __swig_getmethods__["norm"] = _AnnoyIndex.Node_norm_get
    if _newclass:
        norm = _swig_property(_AnnoyIndex.Node_norm_get, _AnnoyIndex.Node_norm_set)
    __swig_setmethods__["v"] = _AnnoyIndex.Node_v_set
    __swig_getmethods__["v"] = _AnnoyIndex.Node_v_get
    if _newclass:
        v = _swig_property(_AnnoyIndex.Node_v_get, _AnnoyIndex.Node_v_set)

    def __init__(self):
        this = _AnnoyIndex.new_Node()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AnnoyIndex.delete_Node
    __del__ = lambda self: None
Node_swigregister = _AnnoyIndex.Node_swigregister
Node_swigregister(Node)


def distance(x, y, f):
    return _AnnoyIndex.distance(x, y, f)
distance = _AnnoyIndex.distance

def init_node(n, f):
    return _AnnoyIndex.init_node(n, f)
init_node = _AnnoyIndex.init_node

def two_means(nodes, f, random, cosine, p, q):
    return _AnnoyIndex.two_means(nodes, f, random, cosine, p, q)
two_means = _AnnoyIndex.two_means

def pq_distance(distance, margin, child_nr):
    return _AnnoyIndex.pq_distance(distance, margin, child_nr)
pq_distance = _AnnoyIndex.pq_distance

def pq_initial_value():
    return _AnnoyIndex.pq_initial_value()
pq_initial_value = _AnnoyIndex.pq_initial_value

def create_split(nodes, f, s, random, n):
    return _AnnoyIndex.create_split(nodes, f, s, random, n)
create_split = _AnnoyIndex.create_split

def normalized_distance(distance):
    return _AnnoyIndex.normalized_distance(distance)
normalized_distance = _AnnoyIndex.normalized_distance

def margin(n, y, f):
    return _AnnoyIndex.margin(n, y, f)
margin = _AnnoyIndex.margin

def side(n, y, f, random):
    return _AnnoyIndex.side(n, y, f, random)
side = _AnnoyIndex.side
class AnnoyIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnoyIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnnoyIndex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _AnnoyIndex.AnnoyIndex_node_set
    __swig_getmethods__["node"] = _AnnoyIndex.AnnoyIndex_node_get
    if _newclass:
        node = _swig_property(_AnnoyIndex.AnnoyIndex_node_get, _AnnoyIndex.AnnoyIndex_node_set)

    def __init__(self, f):
        this = _AnnoyIndex.new_AnnoyIndex(f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AnnoyIndex.delete_AnnoyIndex
    __del__ = lambda self: None

    def reinitialize(self):
        return _AnnoyIndex.AnnoyIndex_reinitialize(self)

    def unload(self):
        return _AnnoyIndex.AnnoyIndex_unload(self)
AnnoyIndex_swigregister = _AnnoyIndex.AnnoyIndex_swigregister
AnnoyIndex_swigregister(AnnoyIndex)

# This file is compatible with both classic and new-style classes.


